.5 .505
0 .4 .8
0 .2 .40 .8 1.3
0 0 0
.25 .60 0.9


The top of this file shows the contents of a file "sph.in"
used in conjunction with a newly developed curved surface 
descriptor 'u'  that stands for user-defined curvature.

At present, the interface is a bit complex, although considerable
effort has been made to try to streamline the process.  While 'u' 
is designed to allow the _user_ to define a surface interface, I 
have already built one particular instance of such an interface, 
namely, something that permits one to have spheres very close to 
a wall.    This README file describes a strategy for spheres close 
to the wall.  (In retrospect, with the new 'u' functionality, the 
strategy could be improved, but it should be reasonable nonetheless.)

First, we present the overall mesh layout for spheres close to a 
wall.  Considere a sphere of radius r0 at height z = h0 > r0 above
the plane z=0.   The near-wall spherical (NWS) mesh is built as
a set of 3 nested shells, similar to what one gets when using
the spherical mesh generator in prenek with the sequence

                    s r0 s r1 s r2 c r3 e

where 's', 'c', and 'e' are the characters indicating spherical
shell (of radii r0, r1, r2), Cartesian transition (distance r3),
and Exit.   If the spheres were centered at (0,0,h0) and r3=h0,
this would be a valid mesh with three layers of elements between
the sphere and the wall, provided r0 < r1 < r2 < r3.   Our interest
is in making h0-r0 << 1, which would necessitate very thin elements.
In particular, the transition ('c') layer would be very ill-conditioned
since the element thickness at the flat side near the sphere would
be << than the distance at the corners where the element edge comes
in at an angle of ~45 degrees.   


The first modification to the spherical mesh to obtain NWS is to have 
only two layers of elements between the sphere and the wall.  (This is the
piece that could be improved to just one layer.)   The third transition ('c')
layer surrounds the sphere only on four sides plus the top, but not on the
bottom.  To facilitate the implementation of this, the element sides that 
would normally have curved surface of radius r2 are _not_ curved.   Their
vertices are placed on a sphere of radius r2 with center at (0,0,h2), but the
surfaces are not curved.   Note that in Nek5000, it suffices to simply specify
vertex locations to realize this configuration; given that the surfaces are
not curved, no further data is required.   Generating such points, however,
required some intervention into prenek --- this has been done in the updated
version of build2.f that is part of prenek.  Note that typically we have 
the center of sphere 2 at a height h2 < r2, which means that some of the 
points on the sphere would nominally be below the z-plane.   In the NWS mesh, 
these points are projected to z=0 so the bottom of the shell is flush with
the wall.

With the bottom layer of the Cartesian mesh removed, the underside of the
NWS mesh comprises two shells.  The inner one is bounded by the sphere
of interest, S0 := (r0; 0,0,h0) and the outer one by the "flat" sphere 
having no curved sides and points defined by S2 = (r2; 0,0,h1), 
z = max (0, z(S2)).   These two shells share a common interface that
is nominally S1 := (r1; 0,0,h1).  It is the inner-most shell (bounded by
S0 and S1) that is crucial to computing lift and drag.  Having this shell
be spherical is advantageous.   However, if it is to have a thickness of, 
say, d = (h0-r0)/2, it would be overly thin.  It would not do a reasonable 
job of filling space in the region near the sphere and away from the wall.
One option that I explored earlier was to shift the center of the S1
sphere to a height such that the low point of the shell would be halfway
between the S0 sphere and the wall, that is, h1 := r1 + (h0-r0)/2 .
This approach could be implemented with the current curved side capability
as it only requires the 's' curvature condition that is already supported
in Nek5000.  However, it tends to generate an unbalanced mesh having a very 
thin shell at the bottom of the sphere and an overly thick near the top.
The space filling capacity at the bottom is particularly poor.

Because S0 is so close to the z=0 plane, a requirement of the the S1 
surface is that it be tangent to z=0 at x=y=0.   As flat sided elements 
do not satisfy this criterion, it was necessary to develop a new curved
side type, which is denoted by 'u', for user-defined curvature.  The
particular implementation of 'u' for the s1 surface of the NWS mesh is 
designed as follows.  Above the equitorial plane z=h1, we have 
s1 := S1 = (r1; 0,0,h1).  Below the equitorial plane we take s1 = (r;0,0,h1),
with r=w1*r1+w2*d1 is chosen such that it is a weighted average of 
r1 and d1, where d1 is half of the distance between (0,0,h0) and the 
intersection of the ray extending from (0,0,h0) that intersects the z-plane.  
The weights are such that w1+w2=1.  At the equator, w1=1.  At the pole,
w2=1.   In between, the weights are chosen such that r rapidly but smoothly 
collapses onto the minimum of (d1,r1).   The net result is that s1 is
nearly spherical (S1) almost everywhere, but is flattened and bulges
out slightly near the bottom where S1 would nominally intersect the
z=0 plane.   Incidentally, we choose h1=h0, so that S1 and S0 are concentric.

To define the NWS geometry, prenek prompts for several inputs that 
I store in "sph.in" (any name is fine).  The read statement reads:

      read(80,*) r0,h0,(xvi(k),k=1,3),(zvi(k),k=1,5),(tsph(k),k=1,3)
      read(80,*) s1,s2,s3

and the derived variables are:


      rm = min(xvi(3),zvi(5)-h0)
      dm = rm - r0

      r1 = r0 + s1*dm          ! 1st shell
      r2 = r0 + s2*dm          ! 2nd shell
      r3 = r0 + s3*dm          ! 3rd shell

      h1 = .5*(h0-r0) + r1
      h1 = max(h1,h0)          ! outer sphere not closer then inner
      h2 = h1
      h3 = h2                  ! 3rd shell

      udata(1) = r0            ! this data passed to prenek as part
      udata(2) = h0            ! of the 'u' curve side parameter list
      udata(3) = r1

Definitions of input data:

 r0,h0   -   Radius and center height of principal sphere.

 xvi(k)  -   Position of outer box edges in xy-plane. 
             For example, ( 0  .5  1. ) would produce a tensor-product
             array of x-y points (-1 -.5 0 .5 1)^2  that could be meshed
             with an output from genb6.f.   ( Note: 0 is mandatory. )

 zvi(k)  -   Position of outer box edge points in z.
             The set (0 .1 .4 .7 1.) would give a thin 0.1 layer
             near the wall.  (Note: 0 is mandatory.)


 tsph(3) -   Translate output by this amount (i.e., if you want the sphere
             at (X,Y,h0), you would enter X Y 0 for this array).

 s1,s2,s3 -  Scale factors.  These are used to adjust the spacing of
             sphere shells described above.  The relevant code is:


      rm = min(xvi(3),zvi(5)-h0)
      dm = rm - r0

      r1 = r0 + s1*dm          ! 1st shell
      r2 = r0 + s2*dm          ! 2nd shell
      r3 = r0 + s3*dm          ! 3rd shell


             In the current dataset, s1,s2,s3 = .25 .60 0.9, but
             some tweaking of s1,s2,s3 will likely be required for
             different h0, r0, xvi, zvi values.


Unlike the spherical shell generator, for the NWS mesh, only
the inner two shells are actually curved and, of these, only the
one the r0 sphere is a true sphere with the 's' curve side condition.
The second spherical shell is implemented with the 'u' definition,
which means that user-defined input is required when running both
prenek and Nek5000.  Specifically, a new routine is required in the
.usr file.   [ As things currently stand, there is also a modification
to genxyz required in Nek5000. See earlier note sent to Fady.]


A COUPLE OF ADDITIONAL NOTES:

.To access the NWS capability in prenek:

    CURVE SIDES
    NEAR-WALL SPHERE
    enter file name (e.g., sph.in) containing requested data


.After building the NWS, exit prenek.

.If you want just a half sphere, reenter prenek, load in the
 NWS just generated, then:

   GLOBAL REFINE
   CLIP PLANES
   y
   .00001
   >

 will clip the +y elements away.  Then exit prenek and under
 the Boundary Condition menu click:

  SET ALL SIDES
  SYMMETRY

 for the desired bc.

.NOTE:  DO NOT clip in the SAME session that you called 
 NEAR-WALL SPHERE.   If you do so, it will be nearly 
 impossible to properly set the boundary conditions on 
 the resultant mesh.

.At present, prenek does not properly set bcs for fields
 other than velocity.  Please either modify build2.f to
 do so, or let me know (fischer@mcs.anl.gov) if you need
 particular bcs to be set.

